name: Build and deploy Next.js app (next start)

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: app-002-gen10-step3-2-node-oshima12
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies and build
        env:
          NEXT_PUBLIC_API_BASE: ${{ secrets.NEXT_PUBLIC_API_BASE }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
        run: |
          set -euxo pipefail
          npm ci || npm install --legacy-peer-deps
          npm config set registry https://registry.npmjs.org
          npm run build

          # next „Çí dependencies „Å´ÁßªÂãïÔºàdevDependencies „Å´„ÅÇ„ÇãÂ†¥ÂêàÔºâ
          if npm list next --depth=0 | grep -q "devDependencies"; then
            echo "Moving next from devDependencies to dependencies..."
            npm install next --save
          fi

          # Êú¨Áï™Áî® node_modules „ÇíÁ¢∫ÂÆü„Å´‰ΩúÊàê
          echo "Creating production node_modules..."
          npm ci --only=production || npm install --only=production

      - name: Prepare deploy folder (standalone)
        shell: bash
        run: |
          set -euxo pipefail

          # „ÇØ„É™„Éº„É≥
          rm -rf deploy
          mkdir -p deploy

          # Standalone „Éì„É´„ÉâÊàêÊûúÁâ©„Çí„Ç≥„Éî„ÉºÔºà„É´„Éº„Éà„Å´ÈÖçÁΩÆÔºâ
          echo "Copying standalone build..."
          if [ -d ".next/standalone" ]; then
            echo "‚úÖ .next/standalone directory exists"
            cp -r .next/standalone/* deploy/
            echo "‚úÖ Standalone files copied to root successfully"
          else
            echo "‚ùå .next/standalone directory does not exist"
            exit 1
          fi

          # Static files „Çí„Ç≥„Éî„ÉºÔºàCSSÈáçË¶ÅÔºÅÔºâ
          echo "Copying static files..."
          if [ -d ".next/static" ]; then
            mkdir -p deploy/.next/static
            cp -r .next/static/* deploy/.next/static/
            echo "‚úÖ Static files copied successfully"
            
            # CSS „Éï„Ç°„Ç§„É´Á¢∫Ë™ç
            echo "=== CSS Files Check ==="
            find .next/static -name "*.css" | head -10 || echo "No CSS files found"
            echo "========================"
          else
            echo "‚ùå .next/static directory does not exist"
            exit 1
          fi

          # Public „Éá„Ç£„É¨„ÇØ„Éà„É™„Çí„Ç≥„Éî„Éº
          if [ -d "public" ]; then
            mkdir -p deploy/public
            cp -r public/* deploy/public/
            echo "‚úÖ Public files copied successfully"
          fi

          # üéØ ÈáçË¶ÅÔºöAzureÂÜç„Éì„É´„ÉâÈò≤Ê≠¢„ÅÆ„Åü„ÇÅ src „ÇíÂê´„ÇÅ„Çã
          echo "Copying src directory for Azure compatibility..."
          if [ -d "src" ]; then
            cp -r src deploy/src
            echo "‚úÖ Src directory copied for Azure build compatibility"
          fi

          # Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„ÇÇ„Ç≥„Éî„ÉºÔºàAzureÂÜç„Éì„É´„ÉâÁî®Ôºâ
          echo "Copying config files..."
          cp package.json deploy/ 2>/dev/null || echo "package.json already copied"
          cp next.config.js deploy/ 2>/dev/null || echo "next.config.js not found"
          cp next.config.ts deploy/ 2>/dev/null || echo "next.config.ts not found"
          cp postcss.config.mjs deploy/ 2>/dev/null || echo "postcss.config.mjs not found"
          cp tsconfig.json deploy/ 2>/dev/null || echo "tsconfig.json not found"

          # ÈáçË¶ÅÔºödeploy„ÅÆÊúÄÁµÇÊßãÈÄ†Á¢∫Ë™ç
          echo "=== Final Deploy Structure Check ==="
          echo "Root files:"
          ls -la deploy/ | grep -E "\.(js|json)$" || echo "No root JS/JSON files"
          echo "server.js check:"
          ls -la deploy/server.js || echo "‚ùå server.js missing in root"
          echo "Static CSS check:"
          find deploy/.next/static -name "*.css" | head -5 || echo "No CSS files in deploy"
          echo "Public files check:"
          ls deploy/public/ | head -10 || echo "No public files"
          echo "================================="
          echo "--- Src directory check ---"
          ls -la deploy/src | head -10 || echo "No src directory"
          echo "--- Public static check ---"
          ls -la deploy/public/_next/static | head -10 || echo "No public static directory"

      - name: Create deploy zip
        run: |
          echo "Creating deploy.zip..."
          cd deploy
          zip -r ../deploy.zip . -x "*.git*" "*.DS_Store*"
          cd ..
          echo "deploy.zip created successfully"
          ls -la deploy.zip
          echo "Zip file size:"
          du -h deploy.zip
          echo "Zip contents:"
          unzip -l deploy.zip | head -20

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deploy.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: .

      - name: Extract deploy zip
        run: |
          echo "Extracting deploy.zip..."
          unzip deploy.zip -d deploy/
          echo "deploy.zip extracted successfully"
          ls -la deploy/

      - name: List deploy folder (debug)
        run: ls -R deploy | sed -n '1,400p'

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-002-gen10-step3-2-node-oshima12'
          slot-name: 'Production'
          package: ./deploy/
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_5A79C044C5434698A9917972C64F6C7B }}
          clean: true
          restart: false
        timeout-minutes: 20