# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - app-002-gen10-step3-2-node-oshima12

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: app-002-gen10-step3-2-node-oshima12
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: npm install, build, and test
        env:
          NEXT_PUBLIC_API_BASE: ${{ secrets.NEXT_PUBLIC_API_BASE }}
        run: |
          npm ci || npm install --legacy-peer-deps
          npm config set registry https://registry.npmjs.org
          npm run build --if-present
          npm run test --if-present

      - name: Show .next after build
        run: ls -R .next


      #2
      - name: Copy artifact for deployment job
        shell: bash
        run: |
          set -euxo pipefail

          # クリーン & 土台作成
          rm -rf deploy
          mkdir -p deploy

          # Next.js standalone 一式（server.js / 必要な node_modules 等）
          cp -a .next/standalone/* deploy/

          # .next 配下を先に作っておく
          mkdir -p deploy/.next

          # .next の全体をコピー（standaloneに含まれていない分）
          if [ -d ".next" ]; then
            # static assets
            if [ -d ".next/static" ]; then
              cp -a .next/static deploy/.next/
            fi
            # server関連ファイル
            if [ -d ".next/server" ]; then
              cp -a .next/server deploy/.next/
            fi
            # standalone builds
            if [ -d ".next/standalone" ]; then
              cp -a .next/standalone/.next/* deploy/.next/ 2>/dev/null || true
            fi
          fi

          # ランタイムで参照されるメタファイルは存在チェックしてコピー
          if [ -f ".next/BUILD_ID" ]; then
            cp .next/BUILD_ID deploy/.next/
          fi
          if [ -f ".next/prerender-manifest.json" ]; then
            cp .next/prerender-manifest.json deploy/.next/
          fi
          if [ -f ".next/routes-manifest.json" ]; then
            cp .next/routes-manifest.json deploy/.next/
          fi

          # public（存在すれば）
          if [ -d "public" ]; then
            cp -a public deploy/
          fi

          # server.js が読む package.json
          cp package.json deploy/

          # node_modules の処理 - standalone で作成された tar.gz を解凍
          if [ -f "deploy/node_modules.tar.gz" ]; then
            echo "---- Extracting node_modules.tar.gz ----"
            cd deploy
            tar -xzf node_modules.tar.gz
            rm node_modules.tar.gz
            cd ..
            echo "---- node_modules extraction completed ----"
            ls -la deploy/node_modules | head -10
          else
            echo "---- node_modules.tar.gz not found, checking standalone structure ----"
            ls -la deploy/ | grep node
          fi

          # デバッグ：起動スクリプト確認
          echo "---- package.json scripts ----"
          cat deploy/package.json | grep -A 10 '"scripts"'
          echo "---- server.js 存在確認 ----"
          ls -la deploy/server.js || echo "server.js not found"

          # デバッグ：ドットファイルも見えるように
          echo "---- deploy root ----"
          ls -la deploy
          echo "---- deploy/.next ----"
          ls -la deploy/.next || true
          echo "---- deploy/.next/static ----"
          ls -la deploy/.next/static || true

      # デバッグスクリプトを追加
      - name: Add debug script
        run: |
          cat > deploy/debug_azure.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          console.log('=== Azure Debug Info ===');
          console.log('Current directory:', process.cwd());
          console.log('__dirname:', __dirname);
          
          function checkDirectory(dir) {
            try {
              const files = fs.readdirSync(dir);
              console.log(`\n=== ${dir} contents ===`);
              files.forEach(file => {
                const fullPath = path.join(dir, file);
                const stats = fs.statSync(fullPath);
                console.log(`${stats.isDirectory() ? 'DIR ' : 'FILE'} ${file}`);
              });
            } catch (err) {
              console.log(`ERROR reading ${dir}:`, err.message);
            }
          }
          
          checkDirectory('.');
          checkDirectory('./.next');
          checkDirectory('./node_modules');
          
          console.log('\n=== Package.json content ===');
          try {
            const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            console.log('Scripts:', pkg.scripts);
          } catch (err) {
            console.log('ERROR reading package.json:', err.message);
          }
          
          console.log('\n=== Environment ===');
          console.log('NODE_ENV:', process.env.NODE_ENV);
          console.log('PORT:', process.env.PORT);
          console.log('=== Debug Complete ===');
          EOF

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deploy
          
      - name: List deploy folder
        run: ls -R deploy

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: deploy

      - name: Show deploy folder (debug)
        run: ls -R deploy

      - name: Wait for SCM to settle
        run: sleep 30

      - name: 'Check Azure App Service Status'
        run: |
          echo "Checking Azure App Service readiness..."
          sleep 30
          echo "App Service should be ready for deployment"

      - name: 'Deploy to Azure Web App (with retry)'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-002-gen10-step3-2-node-oshima12'
          slot-name: 'Production'
          package: ./deploy/
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_5A79C044C5434698A9917972C64F6C7B }}
          clean: true
          restart: false
        timeout-minutes: 20
        continue-on-error: true

      - name: 'Retry Deploy if failed'
        if: steps.deploy-to-webapp.outcome == 'failure'
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-002-gen10-step3-2-node-oshima12'
          slot-name: 'Production'
          package: ./deploy/
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_5A79C044C5434698A9917972C64F6C7B }}
          clean: true
          restart: false
        timeout-minutes: 20

      # Note: デバッグはAzure Portal Log Streamで確認
      # startup-command は Windows App Service では使用不可