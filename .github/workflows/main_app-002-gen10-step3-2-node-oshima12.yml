name: Build and deploy Next.js app (next start)

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: app-002-gen10-step3-2-node-oshima12
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies and build
        env:
          NEXT_PUBLIC_API_BASE: ${{ secrets.NEXT_PUBLIC_API_BASE }}
          NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${{ secrets.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY }}
        run: |
          set -euxo pipefail
          npm ci || npm install --legacy-peer-deps
          npm config set registry https://registry.npmjs.org
          npm run build

          # next を dependencies に移動（devDependencies にある場合）
          if npm list next --depth=0 | grep -q "devDependencies"; then
            echo "Moving next from devDependencies to dependencies..."
            npm install next --save
          fi

          # 本番用 node_modules を確実に作成
          echo "Creating production node_modules..."
          npm ci --only=production || npm install --only=production

      - name: Prepare deploy folder (standalone)
        shell: bash
        run: |
          set -euxo pipefail

          # クリーン
          rm -rf deploy
          mkdir -p deploy

          # 🎯 Next.js Standalone 3点セット正攻法
          echo "=== Next.js Standalone 3-Tier Setup ==="
          
          # 1. Standalone ビルド成果物をコピー（ルートに配置）
          echo "1. Copying .next/standalone contents to root..."
          if [ -d ".next/standalone" ]; then
            echo "✅ .next/standalone directory exists"
            cp -r .next/standalone/* deploy/
            echo "✅ Standalone files copied to root (server.js, package.json, node_modules, .next/)"
          else
            echo "❌ .next/standalone directory does not exist"
            exit 1
          fi

          # 2. 🎯 .next/static を同階層に配置（上書き防止）
          echo "2. Copying .next/static to root level..."
          if [ -d ".next/static" ]; then
            # standaloneの.next/staticが既にあるかチェック
            if [ -d "deploy/.next/static" ]; then
              echo "⚠️  .next/static already exists in standalone, merging..."
              cp -r .next/static/* deploy/.next/static/
            else
              echo "Creating .next/static at root level..."
              mkdir -p deploy/.next/static
              cp -r .next/static/* deploy/.next/static/
            fi
            echo "✅ .next/static placed at correct level"
          else
            echo "❌ .next/static directory does not exist"
            exit 1
          fi

          # 3. 🎯 public を同階層に配置
          echo "3. Copying public to root level..."
          if [ -d "public" ]; then
            cp -r public deploy/public
            echo "✅ public directory placed at correct level"
          else
            echo "⚠️  No public directory found"
          fi

          # 注意：Next.js standaloneビルドには必要なファイルが全て含まれているため
          # srcディレクトリや設定ファイルの追加コピーは不要（セキュリティとサイズ最適化のため削除）
          echo "✅ Skipping unnecessary file copies - standalone build is self-contained"

          # 重要：Next.js Standalone 3点セット検証
          echo "=== Next.js Standalone 3-Tier Validation ==="
          echo "🎯 Checking 3-tier structure compliance..."
          
          echo "1. Root level server.js:"
          ls -la deploy/server.js && echo "✅ server.js at root" || echo "❌ server.js missing"
          
          echo "2. Root level .next/static:"
          ls -la deploy/.next/static/ | head -3 && echo "✅ .next/static at root level" || echo "❌ .next/static missing"
          
          echo "3. Root level public:"
          ls -la deploy/public/ | head -3 && echo "✅ public at root level" || echo "❌ public missing"
          
          echo "🎯 Critical CSS validation:"
          find deploy/.next/static -name "*.css" | head -3 || echo "❌ No CSS files found"
          
          echo "🎯 Structure summary:"
          echo "deploy/"
          echo "├── server.js $(test -f deploy/server.js && echo '✅' || echo '❌')"
          echo "├── .next/static/ $(test -d deploy/.next/static && echo '✅' || echo '❌')"
          echo "└── public/ $(test -d deploy/public && echo '✅' || echo '❌')"
          echo "================================="

      - name: Create deploy zip
        run: |
          echo "Creating deploy.zip..."
          cd deploy
          zip -r ../deploy.zip . -x "*.git*" "*.DS_Store*"
          cd ..
          echo "deploy.zip created successfully"
          ls -la deploy.zip
          echo "Zip file size:"
          du -h deploy.zip
          echo "Zip contents:"
          unzip -l deploy.zip | head -20

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deploy.zip
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: .

      - name: Extract deploy zip
        run: |
          echo "Extracting deploy.zip..."
          unzip deploy.zip -d deploy/
          echo "deploy.zip extracted successfully"
          ls -la deploy/

      - name: List deploy folder (debug)
        run: ls -R deploy | sed -n '1,400p'

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-002-gen10-step3-2-node-oshima12'
          slot-name: 'Production'
          package: ./deploy/
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_5A79C044C5434698A9917972C64F6C7B }}
          clean: true
          restart: true
        env:
          SCM_DO_BUILD_DURING_DEPLOYMENT: false
          ENABLE_ORYX_BUILD: false
          DISABLE_COLLECTSTATIC: 1
        timeout-minutes: 10