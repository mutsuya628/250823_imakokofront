name: Build and deploy Next.js app (next start)

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: app-002-gen10-step3-2-node-oshima12
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies and build
        env:
          NEXT_PUBLIC_API_BASE: ${{ secrets.NEXT_PUBLIC_API_BASE }}
        run: |
          set -euxo pipefail
          npm ci || npm install --legacy-peer-deps
          npm config set registry https://registry.npmjs.org
          npm run build

          # next を dependencies に移動（devDependencies にある場合）
          if npm list next --depth=0 | grep -q "devDependencies"; then
            echo "Moving next from devDependencies to dependencies..."
            npm install next --save
          fi

          # 本番用 node_modules を確実に作成
          echo "Creating production node_modules..."
          npm ci --only=production || npm install --only=production

      - name: Prepare deploy folder (next start)
        shell: bash
        run: |
          set -euxo pipefail

          # クリーン
          rm -rf deploy
          mkdir -p deploy/.next

          # .next 全体（BUILD_ID, static 等）
          # .next ディレクトリの確実なコピー
          echo "Copying .next directory..."
          if [ -d ".next" ]; then
            echo "✅ .next directory exists"
            # 方法1: ディレクトリ全体をコピー
            cp -r .next deploy/ 2>/dev/null && echo "✅ Method 1 succeeded" || {
              echo "Method 1 failed, trying method 2..."
              # 方法2: 個別ファイルをコピー
              cp -a .next/* deploy/.next/ 2>/dev/null && echo "✅ Method 2 succeeded" || {
                echo "Method 2 failed, trying method 3..."
                # 方法3: rsync を使用（利用可能な場合）
                rsync -av .next/ deploy/.next/ 2>/dev/null && echo "✅ Method 3 succeeded" || {
                  echo "❌ All copy methods failed"
                  exit 1
                }
              }
            }
          else
            echo "❌ .next directory does not exist"
            exit 1
          fi

          # コピー結果の確認
          echo "--- .next copy verification ---"
          echo "Original .next contents:"
          ls -la .next/ | head -10
          echo "Copied .next contents:"
          ls -la deploy/.next/ | head -10
          echo "BUILD_ID exists:"
          test -f deploy/.next/BUILD_ID && echo "✅ BUILD_ID found" || echo "❌ BUILD_ID missing"
          echo "static directory exists:"
          test -d deploy/.next/static && echo "✅ static directory found" || echo "❌ static directory missing"

          # public （存在すれば）
          if [ -d "public" ]; then
            cp -a public deploy/
          fi

          # 実行に必要な package.json と node_modules
          cp package.json deploy/
          cp -a node_modules deploy/

          echo '--- deploy root ---'
          ls -la deploy | sed -n '1,120p'
          echo '--- deploy/.next (top) ---'
          ls -la deploy/.next | sed -n '1,120p' || true
          echo '--- deploy/.next/BUILD_ID ---'
          cat deploy/.next/BUILD_ID || echo "BUILD_ID not found"
          echo '--- deploy/.next/static (first 10) ---'
          ls -la deploy/.next/static | head -10 || echo "static directory not found"
          echo '--- deploy/.next/trace (first 10) ---'
          ls -la deploy/.next/trace | head -10 || echo "trace directory not found"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deploy

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: deploy

      - name: List deploy folder (debug)
        run: ls -R deploy | sed -n '1,400p'

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'app-002-gen10-step3-2-node-oshima12'
          slot-name: 'Production'
          package: ./deploy/
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_5A79C044C5434698A9917972C64F6C7B }}
          clean: true
          restart: false
        timeout-minutes: 20